// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/Xe/pawd/cmd/pawd/database (interfaces: Users)

package mock_database

import (
	context "context"
	database "github.com/Xe/pawd/cmd/pawd/database"
	gomock "github.com/golang/mock/gomock"
)

// Mock of Users interface
type MockUsers struct {
	ctrl     *gomock.Controller
	recorder *_MockUsersRecorder
}

// Recorder for MockUsers (not exported)
type _MockUsersRecorder struct {
	mock *MockUsers
}

func NewMockUsers(ctrl *gomock.Controller) *MockUsers {
	mock := &MockUsers{ctrl: ctrl}
	mock.recorder = &_MockUsersRecorder{mock}
	return mock
}

func (_m *MockUsers) EXPECT() *_MockUsersRecorder {
	return _m.recorder
}

func (_m *MockUsers) CheckPassword(_param0 context.Context, _param1 string, _param2 string, _param3 string) (bool, error) {
	ret := _m.ctrl.Call(_m, "CheckPassword", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockUsersRecorder) CheckPassword(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CheckPassword", arg0, arg1, arg2, arg3)
}

func (_m *MockUsers) Create(_param0 context.Context, _param1 string, _param2 string, _param3 bool) (*database.User, error) {
	ret := _m.ctrl.Call(_m, "Create", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(*database.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockUsersRecorder) Create(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Create", arg0, arg1, arg2, arg3)
}

func (_m *MockUsers) UpdateLastSeen(_param0 context.Context, _param1 string) error {
	ret := _m.ctrl.Call(_m, "UpdateLastSeen", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockUsersRecorder) UpdateLastSeen(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateLastSeen", arg0, arg1)
}
